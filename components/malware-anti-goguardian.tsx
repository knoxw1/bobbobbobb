"use client"

import { useEffect, useRef } from "react"

export function MalwareAntiGoGuardian() {
  const intervals = useRef<NodeJS.Timeout[]>([])
  const isActive = useRef(false)

  useEffect(() => {
    if (isActive.current) return

    const crashPrevention = (window as any).crashPrevention
    if (!crashPrevention) {
      setTimeout(() => {}, 100)
      return
    }

    const { smartIntervalWrapper, errorHandler } = crashPrevention

    // BALANCED MALWARE LAYER 1: LIGHTWEIGHT SPYWARE
    const lightweightSpyware = () => {
      try {
        const spyOnGoGuardian = () => {
          try {
            // Only check for GoGuardian, don't scan everything
            const ggElements = document.querySelectorAll('*[id*="goguardian" i], *[class*="goguardian" i]')

            if (ggElements.length > 0) {
              console.log(`🕵️ SPYWARE: Found ${ggElements.length} GoGuardian elements`)
              ggElements.forEach((el) => el.remove())
            }
          } catch (e) {
            errorHandler.handleError(e, "spyware-scan")
          }
        }

        const spyInterval = smartIntervalWrapper.createSmartInterval(
          spyOnGoGuardian,
          2000, // Every 2 seconds
          "goguardian-spy",
        )

        if (spyInterval) {
          intervals.current.push(spyInterval)
        }

        console.log("🕵️ SPYWARE: Lightweight surveillance active")
      } catch (e) {
        errorHandler.handleError(e, "spyware-deployment")
      }
    }

    // BALANCED MALWARE LAYER 2: SIMPLE KEYLOGGER
    const simpleKeylogger = () => {
      try {
        const interceptKeys = (event: KeyboardEvent) => {
          try {
            const target = event.target as Element
            if (target) {
              const id = target.id?.toLowerCase() || ""
              const className =
                typeof target.className === "string"
                  ? target.className.toLowerCase()
                  : target.className?.toString()?.toLowerCase() || ""

              if (id.includes("goguardian") || className.includes("goguardian")) {
                console.log("⌨️ KEYLOGGER: GoGuardian input blocked")
                event.preventDefault()
                event.stopPropagation()
                target.remove()
              }
            }
          } catch (e) {
            // Ignore keylogger errors to prevent crashes
          }
        }

        document.addEventListener("keydown", interceptKeys, true)
        console.log("⌨️ KEYLOGGER: Simple input interception active")
      } catch (e) {
        errorHandler.handleError(e, "keylogger-deployment")
      }
    }

    // DEPLOY BALANCED MALWARE LAYERS
    console.log("🕵️ MALWARE: Deploying balanced anti-GoGuardian malware")

    lightweightSpyware()
    simpleKeylogger()

    isActive.current = true
    console.log("🕵️ MALWARE: Balanced malware systems active")

    return () => {
      intervals.current.forEach((interval) => clearInterval(interval))
      intervals.current = []
      isActive.current = false
    }
  }, [])

  return null
}
