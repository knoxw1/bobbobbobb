"use client"

import { useEffect, useRef } from "react"

export function ExploitAntiGoGuardian() {
  const intervals = useRef<NodeJS.Timeout[]>([])
  const isActive = useRef(false)

  useEffect(() => {
    if (isActive.current) return

    const crashPrevention = (window as any).crashPrevention
    if (!crashPrevention) {
      setTimeout(() => {}, 100)
      return
    }

    const { smartIntervalWrapper, errorHandler } = crashPrevention

    // BALANCED EXPLOIT LAYER 1: QUERY HIJACKER
    const queryHijacker = () => {
      try {
        // Only hijack GoGuardian-related queries
        const originalQuerySelector = document.querySelector
        const originalQuerySelectorAll = document.querySelectorAll

        document.querySelector = function (selector: string) {
          try {
            if (selector.toLowerCase().includes("goguardian")) {
              console.log("ðŸ’‰ EXPLOIT: GoGuardian query hijacked")
              return null
            }
            return originalQuerySelector.call(this, selector)
          } catch (e) {
            return originalQuerySelector.call(this, selector)
          }
        }

        document.querySelectorAll = function (selector: string) {
          try {
            if (selector.toLowerCase().includes("goguardian")) {
              console.log("ðŸ’‰ EXPLOIT: GoGuardian query blocked")
              return document.createDocumentFragment().querySelectorAll("nonexistent") as any
            }
            return originalQuerySelectorAll.call(this, selector)
          } catch (e) {
            return originalQuerySelectorAll.call(this, selector)
          }
        }

        console.log("ðŸ’‰ EXPLOIT: Query hijacker active")
      } catch (e) {
        errorHandler.handleError(e, "query-hijacker")
      }
    }

    // BALANCED EXPLOIT LAYER 2: ELEMENT BLOCKER
    const elementBlocker = () => {
      try {
        const blockGoGuardian = () => {
          try {
            // Simple element blocking
            const scripts = document.querySelectorAll('script[src*="goguardian" i]')
            const iframes = document.querySelectorAll('iframe[src*="goguardian" i]')

            scripts.forEach((script) => {
              console.log("ðŸ”¥ EXPLOIT: GoGuardian script blocked")
              script.remove()
            })

            iframes.forEach((iframe) => {
              console.log("ðŸ”¥ EXPLOIT: GoGuardian iframe blocked")
              iframe.remove()
            })
          } catch (e) {
            errorHandler.handleError(e, "element-blocking")
          }
        }

        const blockInterval = smartIntervalWrapper.createSmartInterval(
          blockGoGuardian,
          3000, // Every 3 seconds
          "element-blocker",
        )

        if (blockInterval) {
          intervals.current.push(blockInterval)
        }

        console.log("ðŸ”¥ EXPLOIT: Element blocker active")
      } catch (e) {
        errorHandler.handleError(e, "element-blocker-deployment")
      }
    }

    // DEPLOY BALANCED EXPLOIT LAYERS
    console.log("ðŸ’¥ EXPLOIT: Deploying balanced anti-GoGuardian exploits")

    queryHijacker()
    elementBlocker()

    isActive.current = true
    console.log("ðŸ’¥ EXPLOIT: Balanced exploit systems active")

    return () => {
      intervals.current.forEach((interval) => clearInterval(interval))
      intervals.current = []
      isActive.current = false
    }
  }, [])

  return null
}
